exception ListeVide
exception IterateurEnDebut
exception IterateurEnFin


type 'a liste = {
  mutable tete     : 'a liste_interne;
  mutable queue    : 'a liste_interne }
and 'a liste_interne = 
  | Vide 
  | Cons of 'a cellule 
and 'a cellule = {
  valeur : 'a;
  mutable suivant   : 'a liste_interne;
  mutable precedent : 'a liste_interne }
and 'a iterateur = {
  mutable courant : 'a liste_interne;
  liste : 'a liste
}


let liste_vide () = 
  { tete = Vide; queue = Vide }


let la_cellule l =
  match l with
    | Vide -> raise ListeVide
    | Cons a -> a


let ajouter_en_tete l v =
  let nouvelle_tete = { valeur = v ; suivant = l.tete ; precedent = Vide }
  in
  match l.tete with
    | Vide -> 
      l.tete <- Cons nouvelle_tete;
      l.queue <- l.tete
    | Cons ancienne_tete ->
      l.tete <- Cons nouvelle_tete;
      ancienne_tete.precedent <- l.tete

    
let imprimer_sans_iterateur l imp =
  let rec imprimer_interne li =
    match li with
      | Vide -> 
	Printf.printf "\n"
      | Cons c -> 
	imp c.valeur;
	imprimer_interne c.suivant
  in
  imprimer_interne l.tete

let imprimer_sans_iterateur_envers l imp =
  let rec imprimer_interne li =
    match li with
      | Vide -> 
	Printf.printf "\n"
      | Cons c -> 
	imp c.valeur;
	imprimer_interne c.precedent
  in
  imprimer_interne l.queue

let iterateur_en_debut l =
  {courant = l.tete; liste = l}

let iterateur_en_fin l =
  {courant = l.queue; liste =l}
  
let est_en_fin it =
  (la_cellule it.courant).suivant = Vide

let est_en_debut it =
  (la_cellule it.courant).precedent = Vide

let avancer it =
  let l2 = (la_cellule it.courant).suivant in
  match l2 with
  |Vide -> raise IterateurEnFin
  |Cons c -> it.courant <- Cons c

let reculer it =
  let l2 = (la_cellule it.courant).precedent in
  match l2 with
  |Vide -> raise IterateurEnDebut
  |Cons c -> it.courant <- Cons c

let valeur it =
  (la_cellule it.courant).valeur

let inserer_avant it e =
  if est_en_debut it then
    ajouter_en_tete it.liste e
  else
   la_cellule(la_cellule((la_cellule it.courant).precedent).suivant) <- Cons {valeur = e ; suivant = it.courant ; precedent = (la_cellule it.courant).precedent}

let inserer_apres it e =
  if est_en_fin it then (
    let listei = Cons {valeur = e; suivant = Vide ; precedent = it.courant} in
    it.courant.suivant <- {courant = listei ; liste = it.liste };
    it.liste.queue <- it.courant.suivant;
  ) else (
    let temp = it.courant.suivant in
    it.courant.suivant <-  Cons {valeur = e ; suivant = temp ; precedent = it.courant} 
  )
