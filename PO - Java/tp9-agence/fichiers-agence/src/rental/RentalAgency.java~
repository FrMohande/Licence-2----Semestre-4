package rental;
import rental.*;
import java.util.*;

/** a rental vehicle agency, client can rent one vehicle at a time */
public class RentalAgency {
    // vehicles of this agency
    private List<Vehicle> vehicles;

    // maps client and rented vehicle (at most one vehicle by client) 
    private Map<Client,Vehicle> theVehicles;

    public RentalAgency() {
    	this.vehicles = new ArrayList<Vehicle>();
        this.theVehicles = new HashMap<Client,Vehicle>(); 
    }
    
    /** adds a vehicle to this agency 
    * @param v the added vehicle
    */
    public void addVehicle(Vehicle v) {
    	this.vehicles.add(v);
    }

    /** provides the list of the vehicles that satisfy the criterion c 
    * @param c the selection criterion 
    * @return  the list of the vehicles that satisfy the criterion c
    */
    public List<Vehicle> select(Criterion c) {	
    	List<Vehicle> tmpList = new ArrayList<Vehicle>();
        for(Vehicle currentV : this.vehicles)
            if(c.isSatisfiedBy(currentV)) tmpList.add(currentV);
        
        return tmpList;
    }
    /** displays the vehicles that satisfy the criterion c 
    * @param c the selection criterion
    */
    public void displaySelection(Criterion c) {
    	List<Vehicle> listToDisplay = select(c);
        for(Vehicle currentV : listToDisplay)
            System.out.println(currentV);
    }

    /** client rents a vehicle 
    * @param client the renter
    * @param v the rented vehicle
    * @return the daily rental price
    * @exception NoSuchElementException   if v is not a vehcile of this agency  
    * @exception IllegalStateException if v is already rented or client rents already another vehicle
    */
    public float rentVehicule(Client client, Vehicle v) throws NoSuchElementException, IllegalStateException {
    	if(!this.vehicles.contains(v)) throw new NoSuchElementException();
        if(Collections.frequency(this.vehicles, v) == Collections.frequency(this.theVehicles.values(), v))
            throw new IllegalStateException();
        this.theVehicles.put(client,v);
        return v.getDailyPrice();
    }
 
    /** returns <em>true</em> iff client c is renting a vehicle
    * @return <em>true</em> iff client c is renting a vehicle
    */
    public boolean hasRentedAVehicle(Client client){
        return this.theVehicles.get(client) != null;
    }
    
    /** returns <em>true</em> iff vehicle v is rented
    * @return <em>true</em> iff vehicle v is rented    
    */
    public boolean isRented(Vehicle v){
    	return Collections.frequency(this.vehicles,v) == Collections.frequency(this.theVehicles.values(), v);
    }
    
    /** the client returns a rented vehicle. Nothing happens if client didn't have rented a vehicle. 
    * @param the client who returns a vehicle
    */
    public void returnVehicle(Client client){
    	this.theVehicles.put(client, null);
    }
    /** provides the collection of rented vehicles for this agency
    * @return collection of currently rented vehicles 
    */
    public Collection<Vehicle> allRentedVehicles(){
        Collection<Vehicle> tmp = this.theVehicles.values();
        tmp.retainAll(this.vehicles);
        return tmp;
    }

}
